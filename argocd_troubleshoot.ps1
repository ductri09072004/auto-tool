# Script t·ªïng h·ª£p kh·∫Øc ph·ª•c t·∫•t c·∫£ v·∫•n ƒë·ªÅ ArgoCD sync
# S·ª≠ d·ª•ng khi services kh√¥ng t·ª± ƒë·ªông c·∫≠p nh·∫≠t sau khi code thay ƒë·ªïi

param(
    [string]$ServiceName = "",
    [switch]$AllServices = $false,
    [switch]$CheckOnly = $false
)

Write-Host "=== ArgoCD Troubleshooting Tool ===" -ForegroundColor Cyan

if ($AllServices) {
    Write-Host "üîç Ki·ªÉm tra t·∫•t c·∫£ services..." -ForegroundColor Yellow
    
    # L·∫•y danh s√°ch t·∫•t c·∫£ applications
    $apps = kubectl get applications -o json | ConvertFrom-Json
    foreach ($app in $apps.items) {
        $name = $app.metadata.name
        $status = $app.status.sync.status
        $health = $app.status.health.status
        
        Write-Host "Service: $name | Sync: $status | Health: $health" -ForegroundColor $(if($status -eq "Synced" -and $health -eq "Healthy") {"Green"} else {"Red"})
        
        if (-not $CheckOnly) {
            Write-Host "  ‚Üí Force syncing $name..." -ForegroundColor Yellow
            kubectl patch application $name -p '{"operation":{"sync":{"syncOptions":["CreateNamespace=true","PrunePropagationPolicy=foreground","PruneLast=true"]}}}' --type merge | Out-Null
        }
    }
} elseif ($ServiceName) {
    Write-Host "üîç Ki·ªÉm tra service: $ServiceName" -ForegroundColor Yellow
    
    # Ki·ªÉm tra ArgoCD Application
    $app = kubectl get application $ServiceName -o json 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y ArgoCD Application: $ServiceName" -ForegroundColor Red
        Write-Host "C√°c Application c√≥ s·∫µn:" -ForegroundColor Yellow
        kubectl get applications
        exit 1
    }
    
    $appObj = $app | ConvertFrom-Json
    $syncStatus = $appObj.status.sync.status
    $healthStatus = $appObj.status.health.status
    
    Write-Host "Sync Status: $syncStatus" -ForegroundColor $(if($syncStatus -eq "Synced") {"Green"} else {"Red"})
    Write-Host "Health Status: $healthStatus" -ForegroundColor $(if($healthStatus -eq "Healthy") {"Green"} else {"Red"})
    
    if (-not $CheckOnly) {
        # Force sync
        Write-Host "üîÑ Force syncing $ServiceName..." -ForegroundColor Yellow
        kubectl patch application $ServiceName -p '{"operation":{"sync":{"syncOptions":["CreateNamespace=true","PrunePropagationPolicy=foreground","PruneLast=true"]}}}' --type merge
        
        # Restart deployment
        Write-Host "üîÑ Restarting deployment..." -ForegroundColor Yellow
        kubectl rollout restart deployment/$ServiceName -n $ServiceName
        
        # Ki·ªÉm tra rollout status
        Write-Host "‚è≥ Waiting for rollout to complete..." -ForegroundColor Yellow
        kubectl rollout status deployment/$ServiceName -n $ServiceName --timeout=300s
    }
} else {
    Write-Host "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ServiceName ho·∫∑c s·ª≠ d·ª•ng -AllServices" -ForegroundColor Red
    Write-Host "C√°ch s·ª≠ d·ª•ng:" -ForegroundColor Yellow
    Write-Host "  .\argocd_troubleshoot.ps1 -ServiceName demo-v42" -ForegroundColor White
    Write-Host "  .\argocd_troubleshoot.ps1 -AllServices" -ForegroundColor White
    Write-Host "  .\argocd_troubleshoot.ps1 -ServiceName demo-v42 -CheckOnly" -ForegroundColor White
    exit 1
}

# Ki·ªÉm tra pods v√† events
Write-Host "`nüîç Ki·ªÉm tra pods v√† events..." -ForegroundColor Yellow
if ($ServiceName) {
    $namespace = $ServiceName
} else {
    $namespace = "default"
}

kubectl get pods -n $namespace -l app=$ServiceName 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "`nüìä Pod details:" -ForegroundColor Cyan
    kubectl describe pods -n $namespace -l app=$ServiceName | Select-String -Pattern "Image:|Events:|Status:"
}

Write-Host "`nüìã Recent events:" -ForegroundColor Cyan
kubectl get events -n $namespace --sort-by='.lastTimestamp' | Select-Object -Last 10

# Ki·ªÉm tra image hi·ªán t·∫°i
Write-Host "`nüñºÔ∏è Current image:" -ForegroundColor Cyan
if ($ServiceName) {
    kubectl get deployment $ServiceName -n $ServiceName -o jsonpath='{.spec.template.spec.containers[0].image}' 2>$null
    Write-Host ""
}

Write-Host "`n=== K·∫øt qu·∫£ ===" -ForegroundColor Green
if ($CheckOnly) {
    Write-Host "‚úÖ Ch·ªâ ki·ªÉm tra tr·∫°ng th√°i, kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi" -ForegroundColor Green
} else {
    Write-Host "‚úÖ ƒê√£ th·ª±c hi·ªán c√°c b∆∞·ªõc kh·∫Øc ph·ª•c:" -ForegroundColor Green
    Write-Host "  - Force sync ArgoCD Application" -ForegroundColor White
    Write-Host "  - Restart Deployment" -ForegroundColor White
    Write-Host "  - Ki·ªÉm tra rollout status" -ForegroundColor White
}

Write-Host "`nüí° N·∫øu v·∫´n c√≥ v·∫•n ƒë·ªÅ, th·ª≠:" -ForegroundColor Yellow
Write-Host "1. kubectl delete pods -n $namespace -l app=$ServiceName" -ForegroundColor White
Write-Host "2. Ki·ªÉm tra ArgoCD UI: kubectl port-forward svc/argocd-server -n argocd 8080:80" -ForegroundColor White
Write-Host "3. Ki·ªÉm tra GitHub Actions logs" -ForegroundColor White
Write-Host "4. Ki·ªÉm tra image c√≥ t·ªìn t·∫°i tr√™n GHCR kh√¥ng" -ForegroundColor White
