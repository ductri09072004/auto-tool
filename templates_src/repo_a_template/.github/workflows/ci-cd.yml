name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - '.github/workflows/ci-cd.yml'  # Ignore workflow file changes
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force_run:
        description: 'Force run even if secrets are not ready'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours as backup

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        # T·∫°o test ƒë∆°n gi·∫£n n·∫øu ch∆∞a c√≥
        python - <<'PY'
        import importlib,sys,os
        for m in ("app","main","server","index"):
            try:
                importlib.import_module(m)
                print(f"Imported {m}")
                break
            except Exception as e:
                pass
        else:
            print("No importable app module; skipping smoke test")
        PY
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:main-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Removed explicit package visibility change to avoid 404 timing/scope issues

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
    
    steps:
    - name: Wait for secrets to be available
      run: |
        echo "Waiting for repository secrets to be set..."
        echo "This step ensures secrets are properly propagated before CI/CD runs..."
        sleep 30  # Increased initial wait time
        
        echo "Checking for MANIFESTS_REPO_TOKEN..."
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        
        # Retry mechanism for checking secrets with longer wait times
        for i in {1..20}; do
          if [ -n "${{ secrets.MANIFESTS_REPO_TOKEN }}" ]; then
            echo "‚úÖ MANIFESTS_REPO_TOKEN is available (attempt $i)"
            echo "Token length: ${#MANIFESTS_REPO_TOKEN}"
            break
          else
            echo "‚è≥ MANIFESTS_REPO_TOKEN not ready yet (attempt $i/20)"
            if [ $i -eq 20 ]; then
              echo "ERROR: MANIFESTS_REPO_TOKEN is required to push to Repo B."
              echo "Please add it in Settings > Secrets and variables > Actions."
              echo "This token should have been set automatically when the service was created."
              echo "If this is a new service, please re-run the service creation process."
              echo "Alternatively, you can manually re-run this workflow after a few minutes."
              echo ""
              echo "Debug info:"
              echo "  Repository: ${{ github.repository }}"
              echo "  Event: ${{ github.event_name }}"
              echo "  Ref: ${{ github.ref }}"
              echo "  Actor: ${{ github.actor }}"
              echo "  Workflow run: ${{ github.run_id }}"
              echo "  Workflow run number: ${{ github.run_number }}"
              echo ""
              echo "üîß Troubleshooting steps:"
              echo "1. Check if secrets are set in repository settings"
              echo "2. Wait 5-10 minutes and re-run this workflow"
              echo "3. Contact support if issue persists"
              exit 1
            fi
            sleep 20  # Increased wait time between retries
          fi
        done

    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: ductri09072004/demo_fiss1_B
        token: ${{ secrets.MANIFESTS_REPO_TOKEN }}
        path: manifests
        
    - name: Update image tag
      run: |
        cd manifests
        SERVICE="${{ github.event.repository.name }}"
        FILE="services/$SERVICE/k8s/deployment.yaml"
        # C·∫≠p nh·∫≠t image v·ªõi tag duy nh·∫•t theo commit
        sed -i "s|image: ghcr.io/.*/.*:.*|image: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:main-${{ github.sha }}|g" "$FILE"
        # C·∫≠p nh·∫≠t timestamp annotation ƒë·ªÉ ƒë·∫£m b·∫£o podTemplateSpec kh√°c ‚Üí rollout
        TS=$(date +%s)
        sed -i "s|timestamp: \".*\"|timestamp: \"$TS\"|g" "$FILE"
        
    - name: Commit and push changes
      run: |
        cd manifests
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        SERVICE="${{ github.event.repository.name }}"
        git commit -m "Update $SERVICE image to ${{ github.sha }}" || exit 0
        git push
        
    - name: Trigger ArgoCD Webhook for Immediate Sync
      run: |
        SERVICE="${{ github.event.repository.name }}"
        echo "Triggering ArgoCD webhook for immediate sync of $SERVICE..."
        
        # G·ª≠i webhook ƒë·∫øn ArgoCD ƒë·ªÉ trigger sync ngay l·∫≠p t·ª©c
        if [ -n "${{ secrets.ARGOCD_WEBHOOK_URL }}" ]; then
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-ArgoCD-Webhook-Token: ${{ secrets.ARGOCD_WEBHOOK_TOKEN }}" \
            "${{ secrets.ARGOCD_WEBHOOK_URL }}/$SERVICE" \
            -d '{"prune": true, "dryRun": false}' \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ ArgoCD webhook triggered successfully for $SERVICE"
          else
            echo "‚ö†Ô∏è ArgoCD webhook failed, but auto-sync will still work"
          fi
        else
          echo "‚ö†Ô∏è ARGOCD_WEBHOOK_URL not configured, falling back to auto-sync"
          echo "ArgoCD will automatically sync when Repo B is updated..."
        fi
        
        echo "Timestamp updated: $(date)"


