name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        # Tạo test đơn giản nếu chưa có
        python -c "import app; print('App imports successfully')"
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image tags
      run: |
        echo "Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}"

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/demo_fiss1_B
        token: ${{ secrets.MANIFESTS_REPO_TOKEN }}
        path: manifests
        
    - name: Update deployment with new image
      run: |
        cd manifests
        # Tạo unique tag với timestamp để đảm bảo image mới nhất
        TIMESTAMP=$(date +%s)
        UNIQUE_TAG="latest-${TIMESTAMP}"
        
        # Cập nhật image tag với unique tag
        sed -i "s|image: ghcr.io/.*/.*:.*|image: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${UNIQUE_TAG}|g" k8s/deployment.yaml
        
        # Cập nhật timestamp annotation để force restart pods
        sed -i "s|timestamp: \".*\"|timestamp: \"$TIMESTAMP\"|g" k8s/deployment.yaml
        
        # Thêm annotation để force update
        sed -i "/timestamp: \"$TIMESTAMP\"/a\        deployment.kubernetes.io/revision: \"$TIMESTAMP\"" k8s/deployment.yaml
        
        # Thêm annotation để force image pull
        sed -i "/deployment.kubernetes.io\/revision: \"$TIMESTAMP\"/a\        kubectl.kubernetes.io/restartedAt: \"$TIMESTAMP\"" k8s/deployment.yaml
        
        echo "Updated image to: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${UNIQUE_TAG}"
        echo "Updated timestamp to: $TIMESTAMP"
        
    - name: Verify deployment changes
      run: |
        cd manifests
        echo "=== Deployment.yaml changes ==="
        cat k8s/deployment.yaml | grep -A 5 -B 5 "image:"
        echo ""
        echo "=== Annotations ==="
        cat k8s/deployment.yaml | grep -A 3 "annotations:"
        
    - name: Commit and push changes
      run: |
        cd manifests
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update ${{ github.event.repository.name }} image to latest-$(date +%s) - Force pull new image" || exit 0
        git push
        
    - name: ArgoCD Auto-Sync
      run: |
        echo "ArgoCD will automatically sync when Repo B is updated..."
        echo "Timestamp updated: $(date)"
        echo "Image tag: latest-$(date +%s)"
        echo "This will force Kubernetes to pull the latest image from GHCR"