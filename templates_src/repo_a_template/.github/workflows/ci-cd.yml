name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ,master]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        # T·∫°o test ƒë∆°n gi·∫£n n·∫øu ch∆∞a c√≥
        python - <<'PY'
        import importlib,sys,os
        for m in ("app","main","server","index"):
            try:
                importlib.import_module(m)
                print(f"Imported {m}")
                break
            except Exception as e:
                pass
        else:
            print("No importable app module; skipping smoke test")
        PY
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:main-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Removed explicit package visibility change to avoid 404 timing/scope issues

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - name: Verify secrets availability
      id: verify_secrets
      run: |
        echo "üîç Checking MANIFESTS_REPO_TOKEN availability..."
        
        TOKEN="${{ secrets.MANIFESTS_REPO_TOKEN }}"
        
        if [ -z "$TOKEN" ]; then
          echo "‚ùå MANIFESTS_REPO_TOKEN is not available"
          echo "This secret should have been set automatically when the service was created."
          echo "Please check:"
          echo "  1. Go to Settings > Secrets and variables > Actions"
          echo "  2. Verify MANIFESTS_REPO_TOKEN exists"
          echo "  3. If not, re-run the service creation process"
          echo ""
          echo "Alternatively, re-run this workflow after 2-3 minutes."
          exit 1
        fi
        
        echo "‚úÖ MANIFESTS_REPO_TOKEN is available!"
        
        # Verify token has access to repo
        echo "Verifying token has access to manifests repository..."
        git ls-remote --exit-code https://$TOKEN@github.com/ductri09072004/demo_fiss1_B.git > /dev/null 2>&1
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Token verified successfully!"
        else
          echo "‚ö†Ô∏è Token present but may not have access to repo"
          echo "Continuing anyway - this might be a propagation delay"
        fi

    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: ductri09072004/demo_fiss1_B
        token: ${{ secrets.MANIFESTS_REPO_TOKEN }}
        path: manifests
        
    - name: Update image tag
      run: |
        cd manifests
        SERVICE="${{ github.event.repository.name }}"
        FILE="services/$SERVICE/k8s/deployment.yaml"
        # C·∫≠p nh·∫≠t image v·ªõi tag duy nh·∫•t theo commit
        sed -i "s|image: ghcr.io/.*/.*:.*|image: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:main-${{ github.sha }}|g" "$FILE"
        # C·∫≠p nh·∫≠t timestamp annotation ƒë·ªÉ ƒë·∫£m b·∫£o podTemplateSpec kh√°c ‚Üí rollout
        TS=$(date +%s)
        sed -i "s|timestamp: \".*\"|timestamp: \"$TS\"|g" "$FILE"
        
    - name: Commit and push changes
      run: |
        cd manifests
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        SERVICE="${{ github.event.repository.name }}"
        git commit -m "Update $SERVICE image to ${{ github.sha }}" || exit 0
        git push
        
    - name: Trigger ArgoCD Webhook for Immediate Sync
      run: |
        SERVICE="${{ github.event.repository.name }}"
        echo "Triggering ArgoCD webhook for immediate sync of $SERVICE..."
        
        # G·ª≠i webhook ƒë·∫øn ArgoCD ƒë·ªÉ trigger sync ngay l·∫≠p t·ª©c
        if [ -n "${{ secrets.ARGOCD_WEBHOOK_URL }}" ]; then
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-ArgoCD-Webhook-Token: ${{ secrets.ARGOCD_WEBHOOK_TOKEN }}" \
            "${{ secrets.ARGOCD_WEBHOOK_URL }}/$SERVICE" \
            -d '{"prune": true, "dryRun": false}' \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ ArgoCD webhook triggered successfully for $SERVICE"
          else
            echo "‚ö†Ô∏è ArgoCD webhook failed, but auto-sync will still work"
          fi
        else
          echo "‚ö†Ô∏è ARGOCD_WEBHOOK_URL not configured, falling back to auto-sync"
          echo "ArgoCD will automatically sync when Repo B is updated..."
        fi
        
        echo "Timestamp updated: $(date)"


